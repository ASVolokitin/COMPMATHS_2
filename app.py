import sys
import numpy as np
import sympy as sp
import matplotlib.pyplot as plt
from PyQt6.QtWidgets import (QApplication, QWidget, QLineEdit, QPushButton, QLabel,
                             QMessageBox, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem)
from PyQt6.QtGui import QDoubleValidator
from PyQt6.QtCore import Qt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

from test import parse_function


class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.initializeUI()

    def initializeUI(self):
        self.setWindowTitle("–ü–æ–∏—Å–∫ –∫–æ—Ä–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏")
        self.setGeometry(100, 100, 600, 600)

        self.left_border = -1
        self.right_border = 1
        self.accuracy = 0.05

        layout = QVBoxLayout()

        self.function_input = QLineEdit(self)
        self.function_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: x**3 - 4*x + 1")
        layout.addWidget(self.function_input)

        self.left_border_input = QLineEdit(self)
        self.right_border_input = QLineEdit(self)
        self.accuracy_input = QLineEdit(self)

        validator = QDoubleValidator()
        self.left_border_input.setValidator(validator)
        self.right_border_input.setValidator(validator)
        self.accuracy_input.setValidator(validator)

        self.left_border_input.setPlaceholderText("–õ–µ–≤—ã–π –ø—Ä–µ–¥–µ–ª")
        self.right_border_input.setPlaceholderText("–ü—Ä–∞–≤—ã–π –ø—Ä–µ–¥–µ–ª")
        self.accuracy_input.setPlaceholderText("–¢–æ—á–Ω–æ—Å—Ç—å")

        input_layout = QHBoxLayout()
        input_layout.addWidget(self.left_border_input)
        input_layout.addWidget(self.right_border_input)
        input_layout.addWidget(self.accuracy_input)
        layout.addLayout(input_layout)

        self.calc_button = QPushButton("–í—ã—á–∏—Å–ª–∏—Ç—å", self)
        self.calc_button.clicked.connect(self.calculate)
        layout.addWidget(self.calc_button)

        self.figure, self.ax = plt.subplots()
        self.canvas = FigureCanvas(self.figure)
        layout.addWidget(self.canvas)

        self.result_table = QTableWidget(0, 2)
        self.result_table.setHorizontalHeaderLabels(["–ú–µ—Ç–æ–¥", "–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å"])
        layout.addWidget(self.result_table)

        self.setLayout(layout)

    def calculate(self):
        function_text = self.function_input.text()
        print(f"–§—É–Ω–∫—Ü–∏—è: {function_text}")  # üõ† –û—Ç–ª–∞–¥–∫–∞

        if not function_text:
            self.show_error("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é")
            return

        func = parse_function(function_text)
        if func is None:
            self.show_error("–û—à–∏–±–∫–∞", f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {error}")
            return

        try:
            left_border = float(
                self.left_border_input.text().replace(",", ".")) if self.left_border_input.text() else self.left_border
            right_border = float(self.right_border_input.text().replace(",",
                                                                        ".")) if self.right_border_input.text() else self.right_border
            accuracy = float(
                self.accuracy_input.text().replace(",", ".")) if self.accuracy_input.text() else self.accuracy

            print(f"–õ–µ–≤—ã–π –ø—Ä–µ–¥–µ–ª: {left_border}, –ü—Ä–∞–≤—ã–π –ø—Ä–µ–¥–µ–ª: {right_border}, –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy}")  # üõ† –û—Ç–ª–∞–¥–∫–∞

            if left_border >= right_border:
                self.show_error("–û—à–∏–±–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞", "–õ–µ–≤—ã–π –ø—Ä–µ–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–∞–≤–æ–≥–æ!")
                return
            if accuracy <= 0:
                self.show_error("–û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏", "–¢–æ—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return

            self.left_border = left_border
            self.right_border = right_border
            self.accuracy = accuracy

            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            x = np.linspace(self.left_border, self.right_border, 400)
            print(f"x: {x[:5]} ... {x[-5:]}")  # üõ† –û—Ç–ª–∞–¥–∫–∞

            y = func(x)  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏
            print(f"y: {y[:5]} ... {y[-5:]}")  # üõ† –û—Ç–ª–∞–¥–∫–∞

            self.ax.clear()
            self.ax.plot(x, y, label=function_text)
            self.ax.axhline(0, color='black', linewidth=0.5)
            self.ax.axvline(0, color='black', linewidth=0.5)
            self.ax.legend()
            self.canvas.draw()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")  # üõ† –û—Ç–ª–∞–¥–∫–∞
            self.show_error("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö: {str(e)}")

    def show_error(self, title, message):
        error_dialog = QMessageBox(self)
        error_dialog.setIcon(QMessageBox.Icon.Warning)
        error_dialog.setWindowTitle(title)
        error_dialog.setText(message)
        error_dialog.exec()


app = QApplication(sys.argv)
window = MainWindow()
window.show()
sys.exit(app.exec())
